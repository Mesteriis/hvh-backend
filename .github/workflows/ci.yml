#name: Pre-commit checks
#
#on: [push, pull_request]
#
#jobs:
#  pre-commit:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up Python
#        uses: actions/_setup-python@v2
#        with:
#          python-version: 3.12
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install poetry
#          poetry install
#          poetry run pre-commit install
#
#      - name: Install hadolint
#        run: |
#          wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64
#          chmod +x /usr/local/bin/hadolint
#
#      - name: Run pre-commit hooks
#        run: poetry run pre-commit run --all-files

name: CI

on: [push, pull_request]

jobs:
  linters:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Install hadolint
        run: |
          wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Run linters
        run: poetry run pre-commit run --all-files

  tests:
    runs-on: ubuntu-latest
    needs: linters

    services:
      postgres:
        image: postgres:16
        #        env:
        #          POSTGRES_USER: postgres
        #          POSTGRES_PASSWORD: postgres
        #          POSTGRES_DB:
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Wait for Postgres
        run: |
          while ! pg_isready -h localhost -p 5432; do
            sleep 1
          done

      - name: Run migrations
        run: poetry run alembic upgrade head

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
        run: |
          poetry run pytest --junitxml=reports/junit/junit.xml --cov=src --cov-report=xml --cov-report=html

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: reports/junit/junit.xml

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov

  build:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: |
          docker buildx build --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache --tag myapp:latest .

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to production..."

  notify:
    runs-on: ubuntu-latest
    needs: [linters, tests, build, deploy]

    steps:
      - name: Send Telegram Notification (Failure)
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} -d text="CI build failed for ${{ github.repository }} on branch ${{ github.ref }} by ${{ github.actor }}."

      - name: Send Telegram Notification (Success)
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} -d text="CI build succeeded for ${{ github.repository }} on branch ${{ github.ref }} by ${{ github.actor }}."
