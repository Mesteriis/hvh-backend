[tool.poetry]
name = "Home Video Hub"
version = "0.0.1"
description = "A backend service for home media library"
authors = ["Aleksander Meshchryakov <avm@sh-inc.ru>"]
repository = "https://github.com/mesteriis/hvh-backend"
documentation = "https://mesteriis.github.io/hvh-backend/"
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.12,<4.0"
fastapi = "^0.115.0"
uvicorn = "^0.31.0"
asyncpg = "^0.29.0"
pydantic-settings = "^2.5.2"
httpx = "^0.27.2"
python-decouple = "^3.8"
yt-dlp = "^2024.9.27"
redis = "^5.1.0"
aiofiles = "^24.1.0"
flower = "^2.0.1"
celery = {extras = ["redis"], version = "^5.4.0"}
colorama = "^0.4.6"
passlib = "^1.7.4"
pyjwt = "^2.9.0"
pydantic = {extras = ["email"], version = "^2.9.2"}
greenlet = "^3.1.1"
sse-starlette = "^2.1.3"
jinja2 = "^3.1.4"
tortoise-orm = {extras = ["asyncpg"], version = "^0.21.6"}
utils-fastapi = {extras = ["tortoise"], version = "^0.0.7"}
fastadmin = {extras = ["fastapi", "tortoise-orm"], version = "^0.2.13"}
tortoise-cli = "^0.1.2"


[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
pytest-mock = "^3.14.0"
deptry = "^0.16.2"
mypy = "^1.5.1"
tox = "^4.11.1"
factory-boy = "^3.3.0"
pre-commit = "^3.7.1"
safety = "^3.2.4"
pytest-asyncio = "^0.23.8"
async-factory-boy = "^1.0.1"
tortoise-orm-stubs = "^1.0.2"
fastapi-debug-toolbar = "^0.6.3"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.2.7"
mkdocstrings = {extras = ["python"], version = "^0.23.0"}

[tool.poetry.group.migrations.dependencies]
aerich = "^0.7.2"
pydantic-settings = "^2.5.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
requires-python = "==3.12.2"

[tool.aerich]
tortoise_orm = "core.init_app.TORTOISE_ORM"
location = "../migrations"
src_folder = "./src"


[tool.mypy]
files = ["src"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.hadolint]
ignore = ["DL3013"]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
minversion = "6.0"
pythonpath = "./src"
python_files = [
    "tests.py",
    "test_*.py",
]
markers = [
    "unit",
    "api",
    "e2e",
    "migrations",
]


[tool.ruff]
target-version = "py312"
line-length = 120
fix = true
select = [
    "E",      # pycodestyle
    "F",      # pyflakes
    "B",      # bugbear
    "C9",     # temporary mccabe
    "C",      # mccabe and flake8-comprehensions
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "S",      # bandit
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "SLF",    # flake8-self
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # LineTooLong
    "E731",   # DoNotAssignLambda
    "N818",   # Exception name should be named with an Error suffix
    "RUF005", # Consider iterable unpacking instead of concatenation
    "B008", # Do not perform function call `Depends` in argument defaults; instead, perform the call within the
    #function, or read the default from a module-level singleton variable
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "TRY003", # Avoid specifying long messages outside the exception class
    "RUF001", # String contains ambiguous `с` (CYRILLIC SMALL LETTER ES). Did you mean `c` (LATIN SMALL LETTER C)?
    "RUF002", # Docstring contains ambiguous `с` (CYRILLIC SMALL LETTER ES). Did you mean `c` (LATIN SMALL LETTER C)?
    "BLE001", # Do not catch blind exception: `Exception`
    "PGH003", # Use specific rule codes when ignoring type issues
    "G004", # Logging statement uses f-string
    "EM101", # Exception must not use a string literal, assign to variable first
    "TRY401", # Redundant exception object included in `logging.exception` call
    "N805", # First argument of a method should be named `self`
    "SIM118", # Use `key in dict` instead of `key in dict.keys()
    "SIM108", # Use ternary operator  instead of `if`-`else`-block


]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["src"]


[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]
"models.py" = ["F821"]

[mccabe]
max-complexity = 6

[pylint]
max-args = 5
max-returns = 3
